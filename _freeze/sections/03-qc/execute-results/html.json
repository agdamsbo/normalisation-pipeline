{
  "hash": "9c928fbdfee82d52394d4fea7ac259fa",
  "result": {
    "markdown": "# Quality control {#qc}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"glossary_setup.R\")\n```\n:::\n\n\nAs quality control goes, this is not exhaustive, but here is my suggestion as to a minimum approach.\n\nOn paper, everything is now done. But of course, you should go through all subjects manually to check that, the masking went well, as that is the real key step in this process.\n\nSticking to the broader lines, the problems may be of either auto-cropping or masking. As masking goes, the script may have included too much or too little in the brain mask. I'll go through suggested solutions to all these below.\n\n## Inspection\n\nI have come to like the ITK-SNAP tool, but fsleyes is good as well.\n\nI would open the new \"SubNN_T1w.nii.gz\" in fsleyes or ITK-SNAP and overlay the \"SubNN_T1w_brain_mask.nii.gz\" and go through to check the masking and cropping. Check the cropping and the masking. Happy? Carry on to the next subject. Not so much? See below.\n\n## Cropping\n\nDo not skip this step. Take a good look at the cropping, as the algorithm might have cropped out part of cerebellum (typically the issue, if any). \n\n1.  Delete all the output-files (remembering that the original files were preserved with \"\\_orig\" suffix) and renaming the original files removing the suffix. \n\n1.  Open the original T1 image and lesion mask in <a class='glossary' title='Thes picture viewing tool from the fsl-package. For more, click here.'>fsleyes</a>, and manually crop the two with the same mask when cropping, you can save the crop mask from the T1 and load it for the lesion mask). If the two files are not cropped to the same dimensions, they won't align, and you'll be in trouble. \n\n1.  After cropping, run the `00nemo_prep_pipeline.sh` script again. It will only run in folders with the *.anat folder not present.\n\n## Masking\n\nIn ITK-SNAP, you can correct the brain mask manually. Overall, open the \"SubNN_T1w.nii.gz\" with {{< kbd mac=Command-G win=Control-G linux=Control-G >}} and the \"SubNN_T1w_brain_mask.nii.gz\" with {{< kbd mac=Command-O win=Control-O linux=Control-O >}}. You can manually edit the brain mask by using the interpolate tool to apply changes to all layers in all three planes. Please have a look at [this demonstration of the tool](https://youtu.be/watch?v=ZVmINdWk5R4). Make sure that changes are made in a different label to the main label of the brain mask segmentation.\n\nHere, I'll just go through an order of work for the two different cases: \n\n### Too little {#too-little}\n\nThis is simple. You just add the missing:\n\n1.  Using the drawing tool, include the missing parts of the brain/infarct in the new label. You can get by by just drawing on each 5-7 layers in the axial plane. Then do interpolate along the axial axis. Check that you are satisfied. If not, then {{< kbd mac=Command-Z win=Control-Z linux=Control-Z >}}. Add a few other layers of manual drawing. Interpolate again. When done, save as a new file.\n\n### Too much {#too-much}\n\nThis is also relatively simple, but has an extra step:\n\n1.  Invert the lesion mask:\n\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code}\n    fslmaths SubNN/SubNN_T1w_brain_mask.nii.gz -binv SubNN/SubNN_T1w_brain_mask_INV.nii.gz\n    ```\n    :::\n\n\n1.  Follow the same steps [as above](#too-little) to add non-brain area to exclude from the brain mask. Save the new brain mask and then invert the modified inverted brain mask again:\n\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code}\n    fslmaths SubNN/SubNN_T1w_brain_mask_INV.nii.gz -binv SubNN/SubNN_T1w_brain_mask_MODIFIED.nii.gz\n    ```\n    :::\n\n\n1.  Check that you are satisfied with the result.\n\n### Register to MNI space again\n\n1.  Having a new, modified brain mask, go to the terminal window again and write the following:\n\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code}\n    sh modified_brain_mask_bbl.sh SubNN/SubNN_T1w.nii.gz SubNN/SubNN_T1w_brain_mask_MODIFIED.nii.gz\n    ```\n    :::\n\n    \n    Please notice that the naming of the modified brain mask doesn't matter.\n\n## Final quality control steps {#final-qc}\n\nAfter registering the lesion mask to standard space, please make sure, that you are satisfied with the result. You might have to correct to masking, especially if its a large lesion. In my experience, the common problem is that the algorithm have left out some of the infarcted area towards cortex. In ITK-SNAP you can add this area. If the lesion is all the way to the surface of the cortex, then make sure to overfill towards the surface (into the non-brain area). Afterwards, you can perform a three step approach to \"punch\" out the lesion only to the surface of the brain.\n\n1.  The following will create an inverted MNI brain mask in you source directory. Make sure that the fsl directory is correct.\n\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code}\n    fslmaths /usr/local/fsl/data/standard/MNI152_T1_1mm_brain_mask.nii.gz -binv mni_1mm_brain_mask_inv.nii.gz\n    ```\n    :::\n\n\n1.  The next is the short version of a three-step operation to 1) make sure the lesion mask is binary, 2) subtract the inverted MNI brain mask as an inverted hole-puncher, and finally 3) using the threshold function to isolate the lesion mask. Please correct the subfolder and file names.\n\n\n    ::: {.cell}\n    \n    ```{.bash .cell-code}\n    fslmaths subNN/subNN_T1w_MNI-1mm_lesion.nii.gz -bin -sub mni_1mm_brain_mask_inv.nii.gz -thr 0  subNN/subNN_T1w_MNI-1mm_lesion_punch.nii.gz\n    ```\n    :::\n\n\n1.  Now please rename the old MNI lesion mask and remove the \"_punch\" suffix from the new lesion mask name to follow the standard naming.\n\n\nIf you are performing several of the \"punch-out\" actions, I have created a small script `other/multi-punch.sh`, that will automate this process a bit. To run it, you provide a folder name to search and a common <a class='glossary' title='Short of Regular Expression. Provides a very powerful character search interface. There are various resources online for learning and validating your regex search pattern.'>regex</a> pattern to search for within the folder (it includes with sub-folders). The syntax would be like this:\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsh multi-punch.sh /sourcefolder \"*_lesion.nii.gz\"\n```\n:::\n\n\n## Glossary\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglossary_table()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> term </th>\n   <th style=\"text-align:left;\"> definition </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> fsleyes </td>\n   <td style=\"text-align:left;\"> Thes picture viewing tool from the fsl-package. For more, [click here](https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FSLeyes). </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> regex </td>\n   <td style=\"text-align:left;\"> Short of Regular Expression. Provides a very powerful character search interface. There are various resources online for learning and validating your regex search pattern. </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}