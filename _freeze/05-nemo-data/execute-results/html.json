{
  "hash": "cc09c9fbdb95ea5684d020d25b60e04b",
  "result": {
    "markdown": "# ZIP to data set\n\n\n::: {.cell}\n\n:::\n\n\nSo, here I'll show how we went from compressed zip file, from the NeMo tool, and to having a data set for further analyses.\n\nI am fairly new to Python, but have worked in R for many years. This means, that I have written just enough in Python, and everything else in R. Small python functions will be wrapped in R scripts. Just a word of warning.\n\nFirst, extract the compressed file and put it where you like. I'll denote this location as the `source.folder`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# source.folder <- \"/full/path/NeMo_output\"\nsource.folder <- \"/Users/au301842/NeMo_output\"\n```\n:::\n\n\nThen we want to extract the `chacovol` data. This is extracted by unpikling `.pkl` files using a short python script wrapped in R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"nemo/unpkl-sparse.R\")\nunpkl_sparse(data.folder = source.folder,\n             \"chacovol_yeo17_mean.pkl\")\n```\n:::\n\n\nThe unpikled files are then collected and merged in a wide format.\n\nBut first, we need to handle the provided atlas `.txt` files to get ROI names:\n\n\n::: {.cell}\n\n```{.r .cell-code}\natlas <- readLines(\"/Users/au301842/NeMo_output/Yeo2011_17Networks_NetworkNames_ColorLUT.txt\")\nrois <- do.call(c,lapply(atlas[-1],function(i){\n  s1 <- strsplit(i,\"_[0-9]{1,3}_\")[[1]][2]\n  strsplit(s1,\" \")[[1]][1]\n  }\n  ))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"nemo/nemo-collect.R\")\ndf <- nemo_collect(\n  data.folder = source.folder,\n  id.pattern = \"W[0-9]{2}\",\n  file.pattern = \"chacovol_yeo17_mean.tsv\",\n  roi.names = rois\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: stRoke\n```\n:::\n:::\n\n\nI very much prefer writing function to do the data handling, but I just have to note, that these functions are very primitive due to lack of time on my end. But they are working and will provide a good foundation for further worker.\n\n## Visualisation\n\nWe also want those nice glass brains. This is entirely based on the scripts from the NeMo tool, which uses the `nibabel` Python package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"nemo/glass-brain.R\")\nglass_brain(\n  data.folder = source.folder,\n  file.pattern = \"chacovol_res2mm_mean.nii.gz\",\n  out.name = \"images/glass_chacovol.png\"\n)\n```\n:::\n\n\n![Averaged chacovol glassbrain plot](images/glass_chacovol.png){fig-align=\"center\"}\n\n\nThe same scirpt can also be used for lesion plotting:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglass_brain(\n  data.folder = \"/Users/folder/with/lesions/\",\n  file.pattern = \"lesion.nii.gz\",\n  id.pattern = \"W(50|49)\", # This id.pattern is used to only include specified ids\n  out.name = \"images/glass_lesion.png\"\n)\n```\n:::\n\n\n![Combined lesion plot](images/glass_lesion.png){fig-align=\"center\"}\n\n## Glossary\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\ndata frame with 0 columns and 0 rows\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}